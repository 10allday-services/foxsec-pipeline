package com.mozilla.secops.parser;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.Serializable;
import java.util.Map;

/**
 * Payload parser for incoming alert events
 *
 * <p>This parser will process alerts that are generated by pipelines, permitting ingestion of
 * alerts as part of feedback from other analysis components.
 */
public class Alert extends PayloadBase implements Serializable {
  private static final long serialVersionUID = 1L;

  private com.mozilla.secops.alert.Alert alert;

  /**
   * Get alert object
   *
   * @return Alert
   */
  public com.mozilla.secops.alert.Alert getAlert() {
    return alert;
  }

  @Override
  public Boolean matcher(String input, ParserState state) {
    Map<String, Object> fields = Parser.convertJsonToMap(input, state.getObjectMapper());
    if (fields == null) {
      return false;
    }
    if ((fields.get("summary") != null)
        && (fields.get("metadata") != null)
        && (fields.get("severity") != null)
        && (fields.get("category") != null)
        && (fields.get("id") != null)
        && (fields.get("timestamp") != null)) {
      return true;
    }
    return false;
  }

  @Override
  @JsonProperty("type")
  public Payload.PayloadType getType() {
    return Payload.PayloadType.ALERT;
  }

  /** Construct matcher object. */
  public Alert() {}

  /**
   * Construct parser object.
   *
   * @param input Input string.
   * @param e Parent {@link Event}.
   * @param state State
   */
  public Alert(String input, Event e, ParserState state) {
    alert = com.mozilla.secops.alert.Alert.fromJSON(input, state.getObjectMapper());
    e.setTimestamp(alert.getTimestamp());
  }
}
