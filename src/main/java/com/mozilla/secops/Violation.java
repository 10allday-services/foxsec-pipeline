package com.mozilla.secops;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mozilla.secops.alert.Alert;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * Represents a violation as would be submitted to iprepd
 *
 * <p>See <a href="https://github.com/mozilla-services/iprepd">iprepd</a>
 */
@JsonInclude(Include.NON_NULL)
public class Violation {
  private final String sourceAddress;
  private final String violation;
  private Integer suppressRecovery;

  /** Valid violation types */
  public enum ViolationType {
    /** HTTP request threshold violation */
    REQUEST_THRESHOLD_VIOLATION {
      @Override
      public String toString() {
        return "request_threshold_violation";
      }
    },
    CLIENT_ERROR_RATE_VIOLATION {
      @Override
      public String toString() {
        return "client_error_rate_violation";
      }
    },
    ENDPOINT_ABUSE_VIOLATION {
      @Override
      public String toString() {
        return "endpoint_abuse_violation";
      }
    },
    HARD_LIMIT_VIOLATION {
      @Override
      public String toString() {
        return "hard_limit_violation";
      }
    },
    USERAGENT_BLACKLIST_VIOLATION {
      @Override
      public String toString() {
        return "useragent_blacklist_violation";
      }
    },
  }

  private static final Map<String, ViolationType> violationMap;

  /*
   * Maps metadata category values as would be specified in HTTPRequest to actual
   * violation types used in violations
   */
  static {
    Map<String, ViolationType> tMap = new HashMap<>();
    tMap.put("error_rate", ViolationType.CLIENT_ERROR_RATE_VIOLATION);
    tMap.put("threshold_analysis", ViolationType.REQUEST_THRESHOLD_VIOLATION);
    tMap.put("endpoint_abuse", ViolationType.ENDPOINT_ABUSE_VIOLATION);
    tMap.put("hard_limit", ViolationType.HARD_LIMIT_VIOLATION);
    tMap.put("useragent_blacklist", ViolationType.USERAGENT_BLACKLIST_VIOLATION);
    violationMap = Collections.unmodifiableMap(tMap);
  }

  /**
   * Create new {@link Violation}
   *
   * @param sourceAddress Source address as string
   * @param violation ViolationType as string
   */
  public Violation(String sourceAddress, String violation) {
    this.sourceAddress = sourceAddress;
    this.violation = violation;
  }

  /**
   * Create new {@link Violation} with recovery suppression value
   *
   * @param soureAddress Source address as string
   * @param violation ViolationType as string
   * @param suppressRecovery Recovery suppression value in seconds
   */
  public Violation(String sourceAddress, String violation, Integer suppressRecovery) {
    this(sourceAddress, violation);
    this.suppressRecovery = suppressRecovery;
  }

  /**
   * Get source address
   *
   * @return Source address string
   */
  @JsonProperty("ip")
  public String getSourceAddress() {
    return sourceAddress;
  }

  /**
   * Get violation type
   *
   * @return Violation type string
   */
  @JsonProperty("violation")
  public String getViolation() {
    return violation;
  }

  @JsonProperty("suppress_recovery")
  public Integer getSuppressRecovery() {
    return suppressRecovery;
  }

  /**
   * Convert {@link Violation} to JSON string
   *
   * @return Violation JSON string or null on serialization failure
   */
  public String toJSON() {
    ObjectMapper mapper = new ObjectMapper();
    try {
      return mapper.writeValueAsString(this);
    } catch (JsonProcessingException exc) {
      return null;
    }
  }

  /**
   * Convert an {@link Alert} into a violation
   *
   * <p>The alert must be of the correct type (e.g., generated by HTTPRequest) and have valid
   * associated metadata in order for conversion to be successful.
   *
   * @param a Alert
   * @return Violation or null if conversion is not possible
   */
  public static Violation fromAlert(Alert a) {
    if (!a.getCategory().equals("httprequest")) {
      return null;
    }
    String sourceAddress = a.getMetadataValue("sourceaddress");
    if (sourceAddress == null) {
      return null;
    }
    String aType = a.getMetadataValue("category");
    if (aType == null) {
      return null;
    }
    ViolationType vt = violationMap.get(aType);
    if (vt == null) {
      return null;
    }
    String suppressValue = a.getMetadataValue(IprepdIO.IPREPD_SUPPRESS_RECOVERY);
    if (suppressValue != null) {
      return new Violation(sourceAddress, vt.toString(), new Integer(suppressValue));
    } else {
      return new Violation(sourceAddress, vt.toString());
    }
  }
}
